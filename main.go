/*
 * OTUS Highload Architect
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.2.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"
	"net/http"
	"otus-social-network-service_gen_swagger/cfg"
	"otus-social-network-service_gen_swagger/db"
	"otus-social-network-service_gen_swagger/repository"
	"otus-social-network-service_gen_swagger/routes"
)

func main() {
	log.Printf("Server starting")

	err := cfg.Init()
	if err != nil {
		// l.Fatal("init config fatal error", err.Error())
	}

	dataManager := db.NewDataManager()
	err = dataManager.Init()
	if err != nil {
		return
	}

	repositoryManager := repository.NewRepositoryManager(dataManager)

	router := routes.NewRouter(repositoryManager)

	log.Printf("Server started. port-%s", cfg.Config().Services.Service.WebServer.ListenPort())
	log.Fatal(http.ListenAndServe(cfg.Config().Services.Service.WebServer.ListenPort(), router))
}
